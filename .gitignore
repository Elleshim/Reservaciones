#include <iostream>     // Biblioteca estándar para entrada y salida
#include <string>       // Biblioteca estándar para manejar cadenas de caracteres
#include <mysql.h>      // Biblioteca de MySQL para C/C++

using namespace std;    // Para evitar tener que usar std:: en cada uso de elementos del estándar

// Definición de códigos de colores y estilos para salida en terminal
#define RESET   "\033[0m"
#define RED     "\033[31m"
#define GREEN   "\033[32m"
#define YELLOW  "\033[33m"
#define BLUE    "\033[34m"
#define MAGENTA "\033[35m"
#define CYAN    "\033[36m"
#define BOLD    "\033[1m"
#define UNDERLINE "\033[4m"

// Clase que maneja las operaciones de la base de datos
class DatabaseManager {
private:
    MYSQL* connect;    // Conexión a MySQL

public:
    // Constructor para inicializar y conectar a la base de datos
    DatabaseManager(const string& host, const string& user, const string& password, const string& database, int port = 3306) {
        connect = mysql_init(NULL);  // Inicializa la conexión MySQL
        if (connect == NULL) {
            cerr << "Error al iniciar la conexión a MySQL" << endl;
            exit(1);  // Termina el programa si hay un error
        }

        // Conecta a la base de datos MySQL
        if (!mysql_real_connect(connect, host.c_str(), user.c_str(), password.c_str(), database.c_str(), port, NULL, 0)) {
            cerr << "Error al tratar de conectar a la base de datos de MySQL: " << mysql_error(connect) << endl;
            exit(1);  // Termina el programa si hay un error
        }
    }

    // Destructor para cerrar la conexión a MySQL
    ~DatabaseManager() {
        mysql_close(connect);  // Cierra la conexión a MySQL
    }

    // Método para crear un nuevo pasajero
    void createPasajero(const string& nombre, const string& apellido, const string& email) {
        // Crea la consulta SQL
        string query = "INSERT INTO Pasajeros (nombre, apellido, email) VALUES ('" + nombre + "', '" + apellido + "', '" + email + "')";
        executeQuery(query);  // Ejecuta la consulta
        refreshPasajeros();  // Refresca los datos de pasajeros
    }

    // Método para crear un nuevo vuelo
    void createVuelo(const string& numero_vuelo, const string& origen, const string& destino, const string& fecha) {
        // Crea la consulta SQL
        string query = "INSERT INTO Vuelos (numero_vuelo, origen, destino, fecha) VALUES ('" + numero_vuelo + "', '" + origen + "', '" + destino + "', '" + fecha + "')";
        executeQuery(query);  // Ejecuta la consulta
        refreshVuelos();  // Refresca los datos de vuelos
    }

    // Método para crear un nuevo pasaje
    void createPasaje(int pasajero_id, int vuelo_id, const string& fecha_reserva, const string& numero_asiento, const string& clase) {
        // Crea la consulta SQL
        string query = "INSERT INTO Pasajes (pasajero_id, vuelo_id, fecha_reserva, numero_asiento, clase) VALUES (" + to_string(pasajero_id) + ", " + to_string(vuelo_id) + ", '" + fecha_reserva + "', '" + numero_asiento + "', '" + clase + "')";
        executeQuery(query);  // Ejecuta la consulta
        refreshPasajes();  // Refresca los datos de pasajes
    }

    // Método para eliminar un pasajero
    void deletePasajero(int id) {
        // Crea la consulta SQL
        string query = "DELETE FROM Pasajeros WHERE id = " + to_string(id);
        executeQuery(query);  // Ejecuta la consulta
        refreshPasajeros();  // Refresca los datos de pasajeros
    }

    // Método para eliminar un vuelo
    void deleteVuelo(int id) {
        // Crea la consulta SQL
        string query = "DELETE FROM Vuelos WHERE id = " + to_string(id);
        executeQuery(query);  // Ejecuta la consulta
        refreshVuelos();  // Refresca los datos de vuelos
    }

    // Método para eliminar un pasaje
    void deletePasaje(int id) {
        // Crea la consulta SQL
        string query = "DELETE FROM Pasajes WHERE id = " + to_string(id);
        executeQuery(query);  // Ejecuta la consulta
        refreshPasajes();  // Refresca los datos de pasajes
    }

    // Método para actualizar la información de un pasajero
    void updatePasajero(int id, const string& nombre, const string& apellido, const string& email) {
        // Crea la consulta SQL
        string query = "UPDATE Pasajeros SET nombre = '" + nombre + "', apellido = '" + apellido + "', email = '" + email + "' WHERE id = " + to_string(id);
        executeQuery(query);  // Ejecuta la consulta
        refreshPasajeros();  // Refresca los datos de pasajeros
    }

    // Método para actualizar la información de un vuelo
    void updateVuelo(int id, const string& numero_vuelo, const string& origen, const string& destino, const string& fecha) {
        // Crea la consulta SQL
        string query = "UPDATE Vuelos SET numero_vuelo = '" + numero_vuelo + "', origen = '" + origen + "', destino = '" + destino + "', fecha = '" + fecha + "' WHERE id = " + to_string(id);
        executeQuery(query);  // Ejecuta la consulta
        refreshVuelos();  // Refresca los datos de vuelos
    }

    // Método para actualizar la información de un pasaje
    void updatePasaje(int id, const string& fecha_reserva, const string& numero_asiento, const string& clase) {
        // Crea la consulta SQL
        string query = "UPDATE Pasajes SET fecha_reserva = '" + fecha_reserva + "', numero_asiento = '" + numero_asiento + "', clase = '" + clase + "' WHERE id = " + to_string(id);
        executeQuery(query);  // Ejecuta la consulta
        refreshPasajes();  // Refresca los datos de pasajes
    }

    // Método para visualizar todos los pasajeros
    void viewPasajeros() {
        executeQuery("SELECT * FROM Pasajeros", true);  // Ejecuta la consulta y muestra el resultado
    }

    // Método para visualizar todos los vuelos
    void viewVuelos() {
        executeQuery("SELECT * FROM Vuelos", true);  // Ejecuta la consulta y muestra el resultado
    }

    // Método para visualizar todos los pasajes
    void viewPasajes() {
        executeQuery("SELECT * FROM Pasajes", true);  // Ejecuta la consulta y muestra el resultado
    }

    // Método para ejecutar consultas SQL
    void executeQuery(const string& query, bool displayResult = false) {
        // Ejecuta la consulta SQL
        if (mysql_query(connect, query.c_str())) {
            cerr << RED << "Error executing query: " << mysql_error(connect) << RESET << endl;
        }
        // Si se solicita mostrar el resultado
        else if (displayResult) {
            MYSQL_RES* res = mysql_store_result(connect);  // Almacena el resultado de la consulta
            if (res) {
                MYSQL_ROW row;
                // Recorre cada fila del resultado
                while ((row = mysql_fetch_row(res))) {
                    for (unsigned int i = 0; i < mysql_num_fields(res); i++) {
                        cout << row[i] << " ";
                    }
                    cout << endl;
                }
                mysql_free_result(res);  // Libera la memoria del resultado
            }
            else {
                cerr << RED << "Error storing result: " << mysql_error(connect) << RESET << endl;
            }
        }
    }

    // Métodos para refrescar los datos de las tablas (no hacen nada en este ejemplo)
    void refreshPasajeros() {
        // Sin salida
    }

    void refreshVuelos() {
        // Sin salida
    }

    void refreshPasajes() {
        // Sin salida
    }
};

// Función para imprimir el menú
void printMenu() {
    cout << BOLD << BLUE << "----------------------------------------" << RESET << endl;
    cout << BOLD << BLUE << "|               MENU                  |" << RESET << endl;
    cout << BOLD << BLUE << "----------------------------------------" << RESET << endl;
    cout << CYAN << BOLD << "1. Crear Pasajero" << RESET << endl;
    cout << CYAN << BOLD << "2. Ver Pasajeros" << RESET << endl;
    cout << CYAN << BOLD << "3. Actualizar Pasajero" << RESET << endl;
    cout << CYAN << BOLD << "4. Eliminar Pasajero" << RESET << endl;
    cout << CYAN << BOLD << "5. Crear Vuelo" << RESET << endl;
    cout << CYAN << BOLD << "6. Ver Vuelos" << RESET << endl;
    cout << CYAN << BOLD << "7. Actualizar Vuelo" << RESET << endl;
    cout << CYAN << BOLD << "8. Eliminar Vuelo" << RESET << endl;
    cout << CYAN << BOLD << "9. Crear Pasaje" << RESET << endl;
    cout << CYAN << BOLD << "10. Ver Pasajes" << RESET << endl;
    cout << CYAN << BOLD << "11. Actualizar Pasaje" << RESET << endl;
    cout << CYAN << BOLD << "12. Eliminar Pasaje" << RESET << endl;
    cout << BOLD << "Elige una opción: " << RESET;
}

// Función principal del programa
int main() {
    // Crea un objeto DatabaseManager para gestionar la base de datos
    DatabaseManager dbManager("localhost", "root", "Umg$2024", "Reservation");

    int choice;
    char cont;
    do {
        printMenu();  // Muestra el menú
        cin >> choice;

        switch (choice) {
        case 1: {
            // Crea un nuevo pasajero
            string nombre, apellido, email;
            cout << "Nombre: ";
            cin.ignore();  // Ignora el carácter de nueva línea anterior
            getline(cin, nombre);
            cout << "Apellido: ";
            getline(cin, apellido);
            cout << "Email: ";
            getline(cin, email);
            dbManager.createPasajero(nombre, apellido, email);  // Llama a la función para crear un pasajero
            break;
        }
        case 2:
            dbManager.viewPasajeros();  // Muestra todos los pasajeros
            break;
        case 3: {
            // Actualiza un pasajero existente
            int id;
            string nombre, apellido, email;
            cout << "Ingrese ID de Pasajero para actualización: ";
            cin >> id;
            cout << "Actualizar nombre: ";
            cin.ignore();  // Ignora el carácter de nueva línea anterior
            getline(cin, nombre);
            cout << "Actualizar apellido: ";
            getline(cin, apellido);
            cout << "Actualizar email: ";
            getline(cin, email);
            dbManager.updatePasajero(id, nombre, apellido, email);  // Llama a la función para actualizar un pasajero
            break;
        }
        case 4: {
            // Elimina un pasajero existente
            int id;
            cout << "Ingrese ID de Pasajero para eliminar: ";
            cin >> id;
            dbManager.deletePasajero(id);  // Llama a la función para eliminar un pasajero
            break;
        }
        case 5: {
            // Crea un nuevo vuelo
            string numero_vuelo, origen, destino, fecha;
            cout << "Ingrese número de vuelo: ";
            cin.ignore();  // Ignora el carácter de nueva línea anterior
            getline(cin, numero_vuelo);
            cout << "Ingrese origen: ";
            getline(cin, origen);
            cout << "Ingrese destino: ";
            getline(cin, destino);
            cout << "Ingrese fecha (YYYY-MM-DD): ";
            getline(cin, fecha);
            dbManager.createVuelo(numero_vuelo, origen, destino, fecha);  // Llama a la función para crear un vuelo
            break;
        }
        case 6:
            dbManager.viewVuelos();  // Muestra todos los vuelos
            break;
        case 7: {
            // Actualiza un vuelo existente
            int id;
            string numero_vuelo, origen, destino, fecha;
            cout << "Ingrese ID de Vuelo para actualizar: ";
            cin >> id;
            cout << "Actualice número de vuelo: ";
            cin.ignore();  // Ignora el carácter de nueva línea anterior
            getline(cin, numero_vuelo);
            cout << "Ingrese nuevo origen: ";
            getline(cin, origen);
            cout << "Ingrese nuevo destino: ";
            getline(cin, destino);
            cout << "Ingrese nueva fecha (YYYY-MM-DD): ";
            getline(cin, fecha);
            dbManager.updateVuelo(id, numero_vuelo, origen, destino, fecha);  // Llama a la función para actualizar un vuelo
            break;
        }
        case 8: {
            // Elimina un vuelo existente
            int id;
            cout << "Ingrese ID de Vuelo para eliminar: ";
            cin >> id;
            dbManager.deleteVuelo(id);  // Llama a la función para eliminar un vuelo
            break;
        }
        case 9: {
            // Crea un nuevo pasaje
            int pasajero_id, vuelo_id;
            string fecha_reserva, numero_asiento, clase;
            cout << "Ingrese Pasajero ID: ";
            cin >> pasajero_id;
            cout << "Ingrese Vuelo ID: ";
            cin >> vuelo_id;
            cout << "Ingrese fecha de reservación (YYYY-MM-DD): ";
            cin.ignore();  // Ignora el carácter de nueva línea anterior
            getline(cin, fecha_reserva);
            cout << "Ingrese número de asiento: ";
            getline(cin, numero_asiento);
            cout << "Ingrese clase: ";
            getline(cin, clase);
            dbManager.createPasaje(pasajero_id, vuelo_id, fecha_reserva, numero_asiento, clase);  // Llama a la función para crear un pasaje
            break;
        }
        case 10:
            dbManager.viewPasajes();  // Muestra todos los pasajes
            break;
        case 11: {
            // Actualiza un pasaje existente
            int id;
            string fecha_reserva, numero_asiento, clase;
            cout << "Ingrese ID de Pasaje para actualizar: ";
            cin >> id;
            cout << "Ingrese nueva fecha de reservación (YYYY-MM-DD): ";
            cin.ignore();  // Ignora el carácter de nueva línea anterior
            getline(cin, fecha_reserva);
            cout << "Ingrese nuevo número de asiento: ";
            getline(cin, numero_asiento);
            cout << "Ingrese nueva clase: ";
            getline(cin, clase);
            dbManager.updatePasaje(id, fecha_reserva, numero_asiento, clase);  // Llama a la función para actualizar un pasaje
            break;
        }
        case 12: {
            // Elimina un pasaje existente
            int id;
            cout << "Ingrese ID de Pasaje para eliminar: ";
            cin >> id;
            dbManager.deletePasaje(id);  // Llama a la función para eliminar un pasaje
            break;
        }
        default:
            cout << RED << "Opción inválida" << RESET << endl;  // Mensaje para opción inválida
        }

        // Pregunta al usuario si desea continuar
        cout << BOLD << "¿Desea continuar? (s/n): " << RESET;
        cin >> cont;
    } while (cont == 's' || cont == 'S');  // Repite el ciclo si el usuario ingresa 's' o 'S'

    cout << BOLD << GREEN << "¡Muchas Gracias, tenga un buen día!" << RESET << endl;
    return 0;
}
